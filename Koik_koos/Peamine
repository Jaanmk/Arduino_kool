 #include <SPI.h>
#include <EthernetV2_0.h>

//********************************************************************
/*
*****************************************************************
Muutujad ajale siia alla paluks
*****************************************************************
*/
unsigned long etherLugeja = 0;
unsigned long etherInterval = 2000;

unsigned long serverlugeja = 0;
unsigned long serverInterval = 1000;

unsigned long varav1lugeja = 0;
unsigned long varav1Interval = 1000;

unsigned long liikumisLugeja = 0;
unsigned long liikumisInterval = 10000;

/*
*****************************************************************
Serverimuutujad
*****************************************************************
*/
byte mac[] = { 0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02 };
EthernetClient client;
char serverName[] = "ole.multirootor.eu";
#define W5200_CS  10
#define SDCARD_CS 4
int yhenduseKaunter = 0;

//Strings
String vanaVarv = "";
String uusVarv = "";

//Booleans
bool netiYhendus = false;

//Numerics
int varav1;
int varav2;

bool movementState = false;
const int  pir1Pin = 8;    // the pin that the movement sensor 1 is attached to
const int  pir2Pin = 2;    // the pin that the movement sensor 2 is attached to

//Initiate pins
int redPin = 6;  // Red LED,   connected to digital pin 6
int grnPin = 5;  // Green LED, connected to digital pin 5
int bluPin = 3;  // Blue LED,  connected to digital pin 3

// Set initial color
int redVal = 0;
int grnVal = 0; 
int bluVal = 0;

int prevR = redVal;
int prevG = grnVal;
int prevB = bluVal;

//Debug
int wait = 5;       // 5ms internal crossFade delay; increase for slower fades
int hold = 0;       // Optional hold when a color is complete, before the next crossFade
int DEBUG = 1;      // DEBUG counter; if set to 1, will write values back via serial
int loopCount = 60; // How often should DEBUG report?

//********************************************************************

void setup() {
  Serial.begin(9600);
  pinMode(SDCARD_CS,OUTPUT);
  digitalWrite(SDCARD_CS,HIGH);
  pinMode(pir1Pin, INPUT);
  pinMode(pir2Pin, INPUT);
  looYhendus();
}

void loop() {
  
  unsigned long currentMillis = millis();
   
  vanaVarv = uusVarv;
  
  if(currentMillis - etherLugeja >= etherInterval){
    kontrolliYhendus();
    etherLugeja = currentMillis;
  }

  if(currentMillis-serverlugeja >=serverInterval){
    if(netiYhendus == true){
      serverlugeja = currentMillis;
      String oledLahe = loeServer("php/toArduino.php");
      Serial.println(oledLahe);
      varav1 = getValue(oledLahe, ' ', 0).toInt();
      varav2 = getValue(oledLahe, ' ', 1).toInt();
      uusVarv = getValue(oledLahe, ' ', 2);
    }else{
      kontrolliYhendus();
    }
   
  }
  
  //************************************************ LIIKUMISANDURID / VALGUS
  if(currentMillis - liikumisLugeja >= liikumisInterval){
    bool move1 = Movement(pir1Pin);
    bool move2 = Movement(pir2Pin);
    if(vanaVarv != uusVarv || move1 == true || move2 == true){
      crossFade(uusVarv);
    } else {
      crossFade("#000000");
    }
    liikumisLugeja = currentMillis;
  }
 
  //************************************************ moodab aega algus
  unsigned long praegu = millis();
  unsigned long kulunudAeg = praegu - currentMillis;
  if(kulunudAeg>0 ){
    Serial.print("Aega kulunud loobile: ");
    Serial.print(praegu-currentMillis);
    Serial.println(" millisekundit");
  }
  //************************************************ moodab aega lopp
  
}

String loeServer(String aadress){
  Serial.println("loeveebileht");
  if(client.connect(serverName, 80)){
    client.print("GET /");
    client.print(aadress); 
    client.println(" HTTP/1.1");
    client.println("Host: ole.multirootor.eu");
    client.println("User-Agent: arduino-ethernet");
    client.println("Connection: close");
    client.println();
    bool reader = false;
    String input;
    int i = 0;
    // if there are incoming bytes available 
    // from the server, read them and print them:
    bool reader2 = true;
   
   while(reader2 == true) {
      char c;
      c = client.read();
      //Serial.println(c);
      if(c == '<'){
        reader = true;
         }else if(c == '>'){
        reader = false;
        reader2 = false;

      }else if(reader){
        input += c; 
      }
    }

   //Serial.println(input);
   //Serial.println("korras");
    client.stop();
    client.flush();
    return input;

    }else{
      netiYhendus = false;
    }
}


//********************************** LOOYHENDUS
void looYhendus(){
  int i = 0;
  while(netiYhendus == false && i<5){
    bool yhendus = Ethernet.begin(mac);
    if(yhendus == true){
       netiYhendus = true;
      yhenduseKaunter++;
      break;
    }else{
      netiYhendus = false;
    }
   delay(500);
    i++;
  }
  if(netiYhendus == true){
    Serial.print("My IP address: ");
    for (byte thisByte = 0; thisByte < 4; thisByte++) {
      // print the value of each byte of the IP address:
      Serial.print(Ethernet.localIP()[thisByte], DEC);
      Serial.print("."); 
    }
  Serial.print("Loodud yhendus number: ");
  Serial.println(yhenduseKaunter);
  }
   
}
  
  
//********************************** KONTROLLIYHENDUS
void kontrolliYhendus(){
  if(netiYhendus == true){
    netiYhendus = true;
    Serial.println("Nett peaks olemas olema");
  }else{
    netiYhendus = false;
    looYhendus();
  }
}

bool Movement(int pin){
  // read the movement sensor input pin:
  int currentState = digitalRead(pin);
  Serial.println(currentState);
  if (currentState == HIGH) {
    // if the current state is HIGH then the button
    // went from off to on:
    Serial.print("Pir ");
    Serial.print(pin);
    Serial.println(" on");
    return true;
  } else {
    // if the current state is LOW then the button
    // went from on to off:
    Serial.print("Pir ");
    Serial.print(pin);
    Serial.println(" off");
    return false;
  }
}

String getValue(String data, char separator, int index){
 int found = 0;
  int strIndex[] = { 0, -1  };
  int maxIndex = data.length()-1;
  for(int i=0; i<=maxIndex && found<=index; i++){
  if(data.charAt(i)==separator || i==maxIndex){
  found++;
  strIndex[0] = strIndex[1]+1;
  strIndex[1] = (i == maxIndex) ? i+1 : i;
  }
 }
 String helper = found>index ? data.substring(strIndex[0], strIndex[1]) : "";
 return helper;
}

void crossFade(String hexstring) {
  
  // Output
  pinMode(redPin, OUTPUT);   // sets the pins as output
  pinMode(grnPin, OUTPUT);   
  pinMode(bluPin, OUTPUT);   
    
  // Convert to 0-255
  vanaVarv = hexstring;
  long number = (long) strtol( &hexstring[1], NULL, 16);
  int R = number >> 16;
  int G = number >> 8 & 0xFF;
  int B = number & 0xFF;

  int stepR = calculateStep(prevR, R);
  int stepG = calculateStep(prevG, G); 
  int stepB = calculateStep(prevB, B);

  for (int i = 0; i <= 1020; i++) {
    redVal = calculateVal(stepR, redVal, i);
    grnVal = calculateVal(stepG, grnVal, i);
    bluVal = calculateVal(stepB, bluVal, i);

    analogWrite(redPin, redVal);   // Write current values to LED pins
    analogWrite(grnPin, grnVal);      
    analogWrite(bluPin, bluVal); 

    delay(wait); // Pause for 'wait' milliseconds before resuming the loop

    if (DEBUG) { // If we want serial output, print it at the 
      if (i == 0 or i % loopCount == 0) { // beginning, and every loopCount times
        Serial.print("Loop/RGB: #");
        Serial.print(i);
        Serial.print(" | ");
        Serial.print(redVal);
        Serial.print(" / ");
        Serial.print(grnVal);
        Serial.print(" / ");  
        Serial.println(bluVal); 
      } 
      DEBUG += 1;
    }
  }
  // Update current values for next loop
  prevR = redVal; 
  prevG = grnVal; 
  prevB = bluVal;
  //delay(hold); // Pause for optional 'wait' milliseconds before resuming the loop
}

int calculateVal(int step, int val, int i) {

  if ((step) && i % step == 0) { // If step is non-zero and its time to change a value,
    if (step > 0) {              //   increment the value if step is positive...
      val += 1;           
    } 
    else if (step < 0) {         //   ...or decrement it if step is negative
      val -= 1;
    } 
  }
  // Defensive driving: make sure val stays in the range 0-255
  if (val > 255) {
    val = 255;
  } 
  else if (val < 0) {
    val = 0;
  }
  return val;
}

int calculateStep(int prevValue, int endValue) {
  int step = endValue - prevValue; // What's the overall gap?
  if (step) {                      // If its non-zero, 
    step = 1020/step;              //   divide by 1020
  } 
  return step;
}